# traefik/traefik.yml
#
# https://zestedesavoir.com/billets/3355/traefik-v2-https-ssl-en-localhost/
# https://community.traefik.io/t/using-traefik-as-a-reverse-proxy-with-certificates-signed-by-my-own-pki/23178
#

global:
  sendAnonymousUsage: false

api:
  dashboard: true
  # That means that the API is not exposed at all on entry point. 
  # So you need to create a router that use api@internal service to access to the API
  insecure: true

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    watch: true
    exposedByDefault: false

  file:
    filename: /etc/traefik/config.yml
    watch: true

log:
  level: INFO
  format: common

entryPoints:
  # websecure:
  #   address: ":443"
  # web:
  #   address: ":80"
  http:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: https
          scheme: https
  https:
    address: ":443"

# certificatesResolvers:
#   myresolver:
#     caServer: /etc/certs/saml.idp.local.crt
  # letencrypt:
  #   acme:
  #     email: youremail@email.com
  #     storage: /certs/acme.json
  #     # caServer: https://acme-v02.api.letsencrypt.org/directory # prod (default)
  #     caServer: https://acme-staging-v02.api.letsencrypt.org/directory # staging
  #     httpChallenge:
  #       entryPoint: web

# certificates:
#     # Note that since no store is defined,
#     # the certificate below will be stored in the `default` store.

#     # Certificatecain
#     - certFile: /etc/certs/saml.idp.local.crt
#       stores:
#         - mystore